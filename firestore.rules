rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function validateCreatePostRequest() {
      let fields = ['caption', 'photoURL', 'datePosted', 'author'];
      return request.auth != null
        && request.resource.data.keys().hasAll(fields)
        && request.resource.data.keys().hasOnly(fields)
        && request.resource.data.datePosted == request.time
        && request.resource.data.author.id == request.auth.uid
        && request.resource.data.author.displayName == request.auth.token.name;
    }

    function validateCreateCommentRequest() {
      let fields = ['body', 'datePosted', 'author'];
      return request.auth != null
        && request.resource.data.keys().hasAll(fields)
        && request.resource.data.keys().hasOnly(fields)
        && request.resource.data.datePosted == request.time
        && request.resource.data.author.id == request.auth.uid
        && request.resource.data.author.displayName == request.auth.token.name;
    }

    function  validateWriteLikeRequest(user) {
      return request.auth != null && request.auth.uid == user;
    }

    match /posts/{post} {
      allow read: if request.auth != null;
      allow create: if validateCreatePostRequest();

      match /comments/{comment} {
        allow read: if request.auth != null;
        allow create: if validateCreateCommentRequest();
      }
    }

    match /users/{user} {
      allow read;

      match /likes/{comment} {
        allow read;
        allow write: if validateWriteLikeRequest(user);
      }
    }

    match /{document=**} {
      allow read, write: if false;
    }
  }
}
